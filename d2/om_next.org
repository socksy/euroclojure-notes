@dnolen
* Om Next
But don't worry, there should be takeaways for those of us not using Om
** Om story so far
Around 16 months since first release, many user, large projects.
*** Mainly to demonstrate that there's a more idiomatic UI approach.
*** Demonstrate to JS that there's a better way to do it.
** React is great
It's immutable friendly. No stateful observations required, due to the diffing strategy.
(also browser quirks)
*** React is heading in the right direction.
They have Facebook steamrolling everything, in a way other libraries don't. See React Native - has a shit tonne of Objective C. I don't want to write this code.
** Om principles
*** Single store
*** Async rendering loop.
Biggest problem in most UI problems is that people flush too soon. A lot of the time it is not needed.
*** Support jumping to any point in time - render from root should always work
Mainly due to the diffing strategy in React
** Om's issues
*** Function closures at odds with React component design
Mistakenly, Om uses functions to represent components. This leads to closures, which as just said, is against how React represents the components
*** Cursors are too leaky an abstraction
Good idea 6 months ago. A lot of the benefits from zippers and lenses. But really just a stop gap to build modular programs
*** Not Pluggable enough
*** Missing pieces
**** Seamless sync
Getting the initial data
**** Getting changes
Lots of ad hoc solutions, but no standard way.
** Describe the problem
Nothing to with Om, nothing to do React, it's to do with all clients that use external resources.
*** HTML was not designed to deal with UI.
It's hypertext. But now lots of apps exist that bear very little resemblance
*** A  good idea for the web, REST, is trying to be used in lots of other situations when it shouldn't
Such as with backend services

E.g. with mobile. Too many requests are bad, so one endpoint gets overloaded in a not so great REST way. And what if Apple release a watch or something?
*** Composition
**** Interpretation
***** UI should not be involved in the problem of where data comes from
"That's a nice one" looking at photo album means something completely different than when talking about a lettuce bin.
*** GraphQL
Not new, in use at Facebook for quite a while.
*** Relay exposes GraphQL to clients
**** Components annotated with composable query  fragments
The idea of compositional fragments that you can put together
**** Remote sync
*** Even though Facebook are such a massive website, they still have the one monolithic design.
Netflix also have this. But originally, they were using REST every. They just dumped 90% of their network code by dropping REST
**** JSONGraph, simple data oriented api to describe demand (recursive)
**** Falcor, routes data structure keys to microservices (router works on client)
returns thing in the exact same shape as the client requested.
Identical to GraphQL concept.
**** Datomic Pull Syntax
***** Get exactly what you need declaratively
***** Recursive `select-keys`
***** Generic simple data description.
***** Looks like this:
[:person/first-name
 :person/last-name
 :person/address]
and this gets everything with implicit joins, and I can specify exactly what I want from the address, for example.
*** Synthesis
<possibly a little hard to understand>
(defui ContactList ; no arguments
**** say something about this, that someone knows what the query looks like
**** don't need to give it the logic, just that someone has the contact
**** then just a JS render part
*** Give each component a Datomic Pull Syntax fragment (Relay)
Cursors disappear!
Though a bit more conservative than relay
*** No cursors?
Cursors only exist to delivery dependency tracking
The queries give us all the information we need
**** So now we don't care about getting the values out with cursors
*** Other changes
**** Components can be used without render loop
**** Integrating custom store much simpler
Stops saying what the store should look like.
**** Leveraging Datomic superpowers becomes very straight forward
***** Entity <-> UI Component
Datomic has idea of time, so we can see all the changed datums
*** <Live coding>
**** no instantiating, all static methods
**** As the client, we don't need to add anything on the endpoint. We just say we want xyz
*** TODOS
**** Query updating
**** Ring/Pedestal Datomic middleware
**** Briding Legacy and Next components
*** So, done, right?
No, of course not ;)
**** Excellent ideas from clojurescript, and enjoyed talking about it with us all. So here's some cool examples.
But examples inside of examples, because we're lisp :D
*** ClojureScript bigger than the web
**** So here's a GSOC to
***** Process CommonJS, AMD and ES 2015 modules
Why? This is clojurescript!
But React isn't clojurescript. It's just JS
***** JDK 8 Nashorn gives us Babel integration
React doesn't use JSX anymore, it uses Babel to do this
<lookup babel>
****** Now React can be used for many typcial web stuff
***** Our path to building React Native using any ClojureScript tool
***** A shoutout to Maria  Neise
*** Ambly
GCDWebServer based Clojurescript compiler integration
**** Compile sync over WebDAV
**** Deliver iOS REPL
**** mDNS for discovery

**** (aside WebGL to iOS GL using JS), as more live coding

**** actually, better than react native, since we can hotload code!
could even do it over wifi!
<applause here>

** Clojurescript in Clojurescript
*** Why? Is it for cool points?
**** Well actually, it's good to have a bunch of clojurescript applications without the JVM dependency
RPi, Node.JS; Electron (prev. Atom Shell); ship updates to deployed apps (iOS); online demos
*** Demonstration:
"not finished, but still awesome"
Cool thing is that CLJS actually depends on itself.
**** Loading the same analyzers that the JVM loads
Awesome example of complex CLJ code without porting to CLJS just working.
**** Eval in CLJS!
** Thanks to:
*** Jonathan Boston, Shaun LeBron, Nicola Mometto, Andrew Mcveigh <someone else, sorry! I didn't type fast enough>
